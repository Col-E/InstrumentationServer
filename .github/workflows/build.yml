name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      is-a-release:
        type: choice
        description: Is this a release? (Choice)
        options:
          - No
          - Yes
          - Hello
          - Bye
      is-a-release-boolean:
        description: Do you want to release? (Boolean)
        type: boolean
        default: true
      is-a-release-boolean-2:
        description: Do you want to release? (Boolean-2)
        type: boolean
        default: false
      operative-system:
        type: choice
        description: Chose the Operative System
        options:
          - ubuntu-latest
          - ubuntu-20.04
          - macos-latest
          - macos-11
          - windows-latest
          - windows-2022
        default: ubuntu-latest
      java-version:
        type: choice
        description: Chose the Operative System
        options:
          - 19
          - 18
          - 17
          - 16
          - 15
          - 14
          - 13
          - 12
          - 11
          - 8
        default: 17


permissions:
  checks: write
  contents: write
  pull-requests: write

jobs:
  hi:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: is-a-release
        run: echo "${{ inputs.is-a-release }}"
      - name: is-a-release-boolean
        run: echo "${{ inputs.is-a-release-boolean }}"
      - name: is-a-release-boolean-2
        run: echo "${{ inputs.is-a-release-boolean-2 }}"
      - name: operative-system
        run: echo "${{ inputs.operative-system }}"
      - name: java-version
        run: echo "${{ inputs.java-version }}"

      - name: is-a-release-true
        if: ${{ inputs.is-a-release == true }}
        run: echo "inputs.is-a-release true"
      - name: is-a-release-no
        if: ${{ inputs.is-a-release == false }}
        run: echo "inputs.is-a-release false"
      - name: is-a-release-hello
        if: ${{ inputs.is-a-release == 'Hello' }}
        run: echo "inputs.is-a-release Hello"
      - name: is-a-release-bye
        if: ${{ inputs.is-a-release == 'Bye' }}
        run: echo "inputs.is-a-release Bye"

      - name: is-a-release-boolean-yes
        if: ${{ inputs.is-a-release-boolean == true }}
        run: echo "inputs.is-a-release-boolean true"
      - name: is-a-release-boolean-no
        if: ${{ inputs.is-a-release-boolean == false }}
        run: echo "inputs.is-a-release-boolean false"

      - name: is-a-release-boolean-2-yes
        if: ${{ inputs.is-a-release-boolean-2 == true }}
        run: echo "inputs.is-a-release-boolean-2 true"
      - name: is-a-release-boolean-2-no
        if: ${{ inputs.is-a-release-boolean-2 == false }}
        run: echo "inputs.is-a-release-boolean-2 false"

#  test-multiple-os:
#    strategy:
#      fail-fast: false
#      matrix:
##        os: [ ubuntu-latest, windows-latest, macos-latest ]
##        java-version: [ 8, 11, 12, 13, 14, 15, 16, 17, 18, 19 ]
#        os: [ ubuntu-latest ]
#        java-version: [ 8 ]
#    runs-on: ${{ matrix.os }}
#    timeout-minutes: 10
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Setup Java JDK
#        uses: actions/setup-java@v3
#        with:
#          distribution: adopt-hotspot
#          java-version: ${{ matrix.java-version }}
#
#      - name: Java version
#        run: java -version
#
#      # The project version extract NEEDS to have the maven wrapper already downloaded.
#      # So we have a dummy step here just to initialize it.
#      - name: Download maven wrapper
#        run: ./mvnw --version
#
#      - name: Build and Test
#        run: ./mvnw test
#
#  build:
#    needs: test-multiple-os
#    if: ${{ github.event_name == 'workflow_dispatch' }}
#    strategy:
#      fail-fast: false
#    runs-on: ${{ inputs.operative-system }}
#    timeout-minutes: 10
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#        with:
#          fetch-depth: 0 # Required depth for JReleaser
#      - name: OS runs
#        run: echo ${{ env.release-os }}
#      - name: Setup Java JDK
#        uses: actions/setup-java@v3
#        with:
#          distribution: adopt-hotspot
#          java-version: ${{ inputs.java-version }}
#
#      # The project version extract NEEDS to have the maven wrapper already downloaded.
#      # So we have a dummy step here just to initialize it.
#      - name: Download maven wrapper
#        run: ./mvnw --version
#
#      # Set environment variable for the project version: "var_to_set=$(command_to_run)" >> sink
#      #  - For maven:  echo "PROJECT_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
#      #  - For gradle: echo "PROJECT_VERSION=$(./gradlew properties | grep -Po '(?<=version: ).*')" >> $GITHUB_ENV
#      - name: Extract project version to environment variable
#        run: echo "PROJECT_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
#
#      # Check if a tag exists that matches the current project version.
#      # Write the existence state to the step output 'tagExists'.
#      - name: 'Check: package version has corresponding git tag'
#        id: tagged
#        shell: bash
#        run: git show-ref --tags --verify --quiet -- "refs/tags/${{ env.PROJECT_VERSION }}" && echo "tagExists=1" >> $GITHUB_OUTPUT || echo "tagExists=0" >> $GITHUB_OUTPUT
#
#      # Run build.
#      # Tag does not exist AND trigger was manual. Deploy release artifacts!
#      - name: Build release
#        if: steps.tagged.outputs.tagExists == 0
#        run: ./mvnw deploy -Prelease -DaltDeploymentRepository=local::default::file:./target/staging-deploy
#
#      # Upload test results
#      - name: Upload Test Results
#        uses: actions/upload-artifact@v2.3.1
#        if: always()
#        with:
#          name: Event File
#          retention-days: 21
#          path: |
#            **/TEST-*
#            **/hs_err_pid*
#
#      # Make release with JReleaser, only running when the project version does not exist as a tag on the repository.
#      - name: Release
#        if: steps.tagged.outputs.tagExists == 0
#        uses: jreleaser/release-action@v2
#        with:
#          arguments: full-release
#        env:
#          JRELEASER_PROJECT_VERSION: ${{ env.PROJECT_VERSION }}
#          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
#          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
#          JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
#          JRELEASER_NEXUS2_USERNAME: ${{ secrets.JRELEASER_DEPLOY_MAVEN_NEXUS2_USERNAME }}
#          JRELEASER_NEXUS2_PASSWORD: ${{ secrets.JRELEASER_DEPLOY_MAVEN_NEXUS2_PASSWORD }}
#
#      # Upload JRelease debug log
#      - name: JReleaser output
#        if: steps.tagged.outputs.tagExists == 0
#        uses: actions/upload-artifact@v3
#        with:
#          name: jreleaser-release
#          path: |
#            out/jreleaser/trace.log
#            out/jreleaser/output.properties
#
#  # Taken from: https://github.com/EnricoMi/publish-unit-test-result-action/blob/v1.20/README.md#support-fork-repositories-and-dependabot-branches
#  #  - Required for test-results to be published
#  event_file:
#    needs: build
#    if: ${{ github.event_name == 'workflow_dispatch' }}
#    name: "Event File"
#    runs-on: ubuntu-latest
#    steps:
#      - name: Upload
#        uses: actions/upload-artifact@v2
#        with:
#          name: Event File
#          path: ${{ github.event_path }}
#
#  unit-test-results:
#    needs: event_file
#    if: ${{ github.event_name == 'workflow_dispatch' }}
#    name: Unit Test Results
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download and Extract Artifacts
#        env:
#          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
#        run: |
#          mkdir -p artifacts && cd artifacts
#
#          artifacts_url=${{ github.event.workflow_run.artifacts_url }}
#
#          gh api "$artifacts_url" -q '.artifacts[] | [.name, .archive_download_url] | @tsv' | while read artifact
#          do
#            IFS=$'\t' read name url <<< "$artifact"
#            gh api $url > "$name.zip"
#            unzip -d "$name" "$name.zip"
#          done
#      - name: Publish Unit Test Results
#        uses: EnricoMi/publish-unit-test-result-action@v1
#        with:
#          commit: ${{ github.event.workflow_run.head_sha }}
#          event_file: artifacts/Event File/event.json
#          event_name: ${{ github.event.workflow_run.event }}
#          files: "artifacts/**/*.xml"
