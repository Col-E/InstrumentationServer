name: Test Multi OS

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  checks: write
  contents: write
  pull-requests: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
#        os: [ ubuntu-latest, windows-latest, macos-latest ]
        os: [ ubuntu-latest ]
#        java-version: [ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 ]
#        java-version: [ 19.0.2+7, 19.0.1+10, 19.0.0+36, 18.0.2+101, 18.0.2+9, 18.0.1+10, 18.0.0+36, 17.0.6+10, 17.0.5+8, 17.0.4+101, 17.0.4+8, 17.0.3+7, 17.0.2+8, 17.0.1+12, 17.0.0+35, 16.0.2+7, 16.0.1+9, 16.0.0+36, 15.0.2+7, 15.0.1+9, 15.0.0+36, 14.0.2+12, 14.0.1+7.1, 14.0.0+36.1, 13.0.2+8.1, 13.0.1+9.1, 13.0.0+33.1, 12.0.2+10.1, 12.0.1+12, 12.0.0+33, 11.0.18+10, 11.0.17+8, 11.0.16+101, 11.0.16+8, 11.0.15+10, 11.0.14+101, 11.0.14+9, 11.0.13+8, 11.0.12+7, 11.0.11+9, 11.0.10+9, 11.0.9+101, 11.0.9+11.1, 11.0.9+11, 11.0.8+10, 11.0.7+10.1, 11.0.6+10.1, 11.0.5+10.1, 11.0.4+11.1, 11.0.3+7, 11.0.2+9, 11.0.2+7, 11.0.1+13, 11.0.0+28, 10.0.2+13.1, 9.0.4+11, 9.0.0+181, 8.0.362+9, 8.0.352+8, 8.0.345+1, 8.0.342+7, 8.0.332+9, 8.0.322+6, 8.0.312+7, 8.0.302+8, 8.0.292+10, 8.0.282+8, 8.0.275+1, 8.0.272+10, 8.0.265+1, 8.0.262+10, 8.0.252+9.1, 8.0.242+8.1, 8.0.232+9.1, 8.0.222+10.1, 8.0.212+4, 8.0.212+3, 8.0.202+8, 8.0.192+12, 8.0.181+13 ]
        java-version: [ 11.0.0+28, 10.0.2+13.1, 9.0.4+11, 9.0.0+181, 8.0.362+9, 8.0.352+8, 8.0.202+8, 8.0.192+12, 8.0.181+13 ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required depth for JReleaser
      - name: Setup Java JDK
        uses: actions/setup-java@v3
        with:
          distribution: adopt-hotspot
          java-version: ${{ matrix.java-version }}

      - name: Java version
        run: java -version

      # The project version extract NEEDS to have the maven wrapper already downloaded.
      # So we have a dummy step here just to initialize it.
      - name: Download maven wrapper
        run: ./mvnw --version

      # Set environment variable for the project version: "var_to_set=$(command_to_run)" >> sink
      #  - For maven:  echo "PROJECT_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
      #  - For gradle: echo "PROJECT_VERSION=$(./gradlew properties | grep -Po '(?<=version: ).*')" >> $GITHUB_ENV
      - name: Extract project version to environment variable
        run: echo "PROJECT_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      # Check if a tag exists that matches the current project version.
      # Write the existence state to the step output 'tagExists'.
      - name: 'Check: package version has corresponding git tag'
        id: tagged
        shell: bash
        run: git show-ref --tags --verify --quiet -- "refs/tags/${{ env.PROJECT_VERSION }}" && echo "tagExists=1" >> $GITHUB_OUTPUT || echo "tagExists=0" >> $GITHUB_OUTPUT

      # Run build.
      # Either the tag exists, or the trigger was not a manual one.
      # Without explicit intent we do not want to publish a release.
      - name: Build and Test
        if: steps.tagged.outputs.tagExists == 1 || github.event_name != 'workflow_dispatch'
        run: ./mvnw test
