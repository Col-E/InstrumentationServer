package software.coley.instrument.util;

import software.coley.instrument.command.AbstractCommand;
import software.coley.instrument.command.CommandConstants;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;

/**
 * Utility to facilitate generating byte array content.
 *
 * @author Matt Coley
 */
public class ByteGen {
	private final ByteArrayOutputStream out = new ByteArrayOutputStream();
	private final DataOutputStream stream = new DataOutputStream(out);

	/**
	 * New generator.
	 */
	public ByteGen() {
		// Placeholders for ID and content length, updated on final build later.
		appendByte(0);
		appendInt(0);
	}

	/**
	 * @param data
	 * 		String to append.
	 *
	 * @return Self.
	 */
	public ByteGen appendString(String data) {
		try {
			stream.writeUTF(data);
			return this;
		} catch (IOException ex) {
			throw new IllegalStateException(ex);
		}
	}

	/**
	 * @param data
	 * 		byte to append.
	 *
	 * @return Self.
	 */
	public ByteGen appendByte(int data) {
		try {
			stream.writeByte(data);
			return this;
		} catch (IOException ex) {
			throw new IllegalStateException(ex);
		}
	}

	/**
	 * @param data
	 * 		int to append.
	 *
	 * @return Self.
	 */
	public ByteGen appendInt(int data) {
		try {
			stream.writeInt(data);
			return this;
		} catch (IOException ex) {
			throw new IllegalStateException(ex);
		}
	}

	/**
	 * @param data
	 * 		array to append.
	 *
	 * @return Self.
	 */
	public ByteGen appendByteArray(byte[] data) {
		try {
			stream.writeInt(data.length);
			stream.write(data);
			return this;
		} catch (IOException ex) {
			throw new IllegalStateException(ex);
		}
	}

	/**
	 * @return Generated byte array.
	 */
	public byte[] build(byte key) throws IOException {
		byte[] output = out.toByteArray();
		byte[] length = createLengthArray(output.length - CommandConstants.HEADER_SIZE);
		// Update key in output
		output[0] = key;
		// Update content length in output
		for (int i = 0; i < 4; i++)
			output[i + 1] = length[i];
		return output;
	}

	/**
	 * @param length
	 * 		Length int.
	 *
	 * @return {@code byte[]} representation of integer.
	 *
	 * @throws IOException
	 * 		Not thrown.
	 */
	private static byte[] createLengthArray(int length) throws IOException {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		DataOutputStream dos = new DataOutputStream(baos);
		dos.writeInt(length);
		return baos.toByteArray();
	}
}
